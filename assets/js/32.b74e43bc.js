(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{339:function(c,a,e){"use strict";e.r(a);var h=e(1),t=Object(h.a)({},(function(){var c=this.$createElement;this._self._c;return this._m(0)}),[function(){var c=this,a=c.$createElement,e=c._self._c||a;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"高速缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高速缓存"}},[c._v("#")]),c._v(" 高速缓存")]),c._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[c._v("#")]),c._v(" 简介")]),c._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[c._v(".jpg\n")])])]),e("p",[c._v("cache是一个存放最近刚被使用的内存字的小的高速存储器，他可以快速地访问这些内存字。如果需要的内 存字大部分都在cache里，那就可以极大地降低存储器的延时。 既能提高带宽又能减小延时的最有效的技术是使用多级cache 基本技术是分别为指令和数据提供高速缓存，这种称为分离式高速缓存split cache的技术效率高。 优点:首先，可以在每个cache中独立地进行内存操作，这样可以使存储系统的带宽增大一倍。这也是在 Mic-1中提供两个内存端口的原因:每个端口都可以有自己的cache，注意，每个cache都独立地访问主存储 器。 目前使用的许多内存系统都比以上复杂，都使用了额外的cache——第2级cache，它位于1级指令和数据 cache以及主存之间。更复杂内存系统可能需要三级或者更多级的cache 上图中有三级cache，cpu芯片本身包括一个小的指令cache和一个小的数据cache，容量一般为16~ 64KB。还有第2级cache，他不在CPU芯片内部，但是和CPU封装在一起，在CPU芯片旁边，通过高速通道 和CPU相连。此cache是通用的，既包括数据也包括指令，容量一般为512KB~1MB。第3级的cache位于处 理器板上，他由几兆字节的SRAM组成，比主存的DRA速度快很多。cache的内容是逐级包含的，第1级的 cache的全部内容都在第2级cache中，第2级的cache的全部内容都在第3级cache中。 cache利用两种地址局部性来实现其目标。空间局部性spatial locality即最近被访问的地址附近的地址很可能 在将来被访问。cache使用这种特性一次把比实际需要的更多的数据调入，希望他们将来能被用到。时间局 限性temporal locality意思是最近访问的地址将会被再次访问。这种情况在栈顶的内存地址或者循环内的指令 中很常见。利用时间局部性时需要考虑当cache不命中时如何替换。许多利用时间局部性的cache的替换算 法都是把最近不常用的项替换出去。\n所有的cache都使用下面的模型。主存被分成固定大小的称为cache快的块。一个cache块通常由4~64个连 续的字节组成。cache块从0开始连续编号，因此如果使用32个字节的快，块0就是字节0~31， 块1就是32 ~63，以此类推。任何时候都有某些块位于高速缓存中。当需要访问内存时，cache控制器电路检查需要访 问的字是否在cache中。如果在，就使用改值，这样就可以节约一次内存访问。如果不在，将从cache中移 去某些快，并用从内存中或者更低级别的cahce中取出的块替换这些块。替换有多种机制，但是其基本的思 想是在cache中保存最常用的块，这样可以最大限度地提高cache命中率。")]),c._v(" "),e("h2",{attrs:{id:"直接映射的高速内存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#直接映射的高速内存"}},[c._v("#")]),c._v(" 直接映射的高速内存")]),c._v(" "),e("p",[c._v("直接映射的高速缓存是direct-mapped cache 是最简单的cache，4-38a中是一个单层的直接映射cache的例 子。此cache共包括2048项。cache中的每项(也就是每块)都保存来自主存的一个cache块。如果使用32 字节的cache块大小(以此作为例子)，cache一共可以保存64KB的数据。每个cache块包括以下三个部分 1有效位Valid用途表示该项中的数据是否有效。当系统启动时，所有的项都被标记为无效 2标记字段Tag是一个唯一的16位的值，他表示数据块在内存中相应的位置3 3数据字段Data是相应内存位置的数据拷贝。该字段包括32个字节 采用直接映射高速缓存，每个内存字只能保存在唯一的cache位置上。给定一个内存地址，cache中只有一 个位置和它对应。如果该位置上没有此项，那么他就不在cache中。存取cahce中的数据时，地址被分为如 下四个部分")]),c._v(" "),e("p",[c._v("1和cache项中的Tag位对应的TAG字段")]),c._v(" "),e("p",[c._v("2保存相应的数据的cache块的块号字段LINE，如果数据在其中的话")]),c._v(" "),e("p",[c._v("3字字段WORD表示需要使用该块中的哪个字")]),c._v(" "),e("p",[c._v("4字节字段BYTE通常不用，但是如果请求的是一个单独的字节，他就用于指明字中的那一个字节是需要的。 对于只支持32位字的cache来说，该字段总是0")]),c._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[c._v(".jpg\n")])])]),e("p",[c._v("当cpu产生一个内存地址时，硬件从地址中取出11位LINE字段，并使用该字段到2048个项中进行块检索， 如果该项是有效的，就比较内存地址的TAG字段和此项的Tag字段。如果相同，就说明cache项中保存的是 需要的字，这种情况被称为cache命中，如果命中，就可以直接使用cache中的字，而不必访问内存，当然 还需要从cache中取出需要的字，该项中的其他部分是没有用的。如果该项是无效的或者Tag不匹配，称为 cache缺失。这种情况下，就从内存中取出32字节的cache块并保存在cache项中，替换掉现在的项。但 是，如果目前的cache项已经被修改过，那么在覆写他之前必须首先把他写回主存。")]),c._v(" "),e("p",[c._v("如果程序频繁的使用地址0和地址65536的字，那么就会发生冲突，每次对其中之一的访问都会使 cache项发生替换。解决该问题的一种方案是允许一个cache项中有两块或者更多块。每个地址可以对应n个 cache项的高速缓存称为n路组相连高速缓存。")]),c._v(" "),e("p",[c._v("4路组相连cache")]),c._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[c._v(".jpg\n")])])]),e("p",[c._v("虽然可以从需要访问的内存地址中计算出cache项的确切位置，但是需要依次检查n个cache项来确定要访问 的地址是否在cache中。")]),c._v(" "),e("p",[c._v("使用组相连时，需要使用替换算法。最优的决策是需要知道将来的内存访问情况，目前很常用的是最近最少 使用LRU(least recently used)算法是一个很好的算法。该算法把可能用到的cache块按顺序记录在一张表中。 当一个现有的块被访问时，他修改该表，标记为最近使用。当需要替换某项时，该表中的最后一项，也就是 最不常用的一项，将被替换。")]),c._v(" "),e("p",[c._v("极端情况，一个共有2048项的cache按照2048路组相连组织，这样一共只有一组，组中共有2048项。这 样，所有的内存地址都映射在同一组上，查找时就需要比较cache中所有2048个地址的标记。请注意，这是 每项都必须有标记比较逻辑。由于line字段长度为0，TAG字段就包含了整个地址字段(不包括word和byte 字段)。进一步说，当替换一个cache块时，所有的2048块都有可能被替换。管理2048项的访问次序需要 记录大量信息，这使得lru算法变得不可行。(注意，这张表在每次内存操作时都要更新，而不是只在缺失 时更新)。组数多的组相连cache和组数少的相比，大多数情况下性能并不高。")])])}],!1,null,null,null);a.default=t.exports}}]);